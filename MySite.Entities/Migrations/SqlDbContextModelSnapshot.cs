// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySite.Entities.DbContexts;

#nullable disable

namespace MySite.Entities.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AcDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcDate = new DateOnly(2020, 2, 1),
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 652, DateTimeKind.Local).AddTicks(5557),
                            Description = "Decleration of honor in dean’s honor list for maintaining a high GPA"
                        },
                        new
                        {
                            Id = 2,
                            AcDate = new DateOnly(2016, 1, 1),
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 652, DateTimeKind.Local).AddTicks(5603),
                            Description = "Sabanci University Extracurricular Activities Award Awarded for theatre tours around the country and abroad / Organizing the Offtown Festival with\r\nthe Offtown Committee"
                        });
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Activitie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateOnly>("ScBeginning")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ScEndning")
                        .HasColumnType("date");

                    b.Property<string>("ScName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Experiance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("ExBeginning")
                        .HasColumnType("date");

                    b.Property<string>("ExDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateOnly>("ExEnding")
                        .HasColumnType("date");

                    b.Property<string>("ExPlace")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ExTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiances");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.MainMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AreaName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CssName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IconName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParentMenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("MainMenus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Index",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3176),
                            CssName = "",
                            MenuName = "About",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Index",
                            AreaName = "Admin",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3188),
                            CssName = "",
                            MenuName = "Education",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActionName = "Index",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3191),
                            CssName = "",
                            MenuName = "Work Experinces",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Index",
                            AreaName = "Admin",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3193),
                            CssName = "",
                            MenuName = "Projects",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "Index",
                            AreaName = "Admin",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3195),
                            CssName = "",
                            MenuName = "Skills",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ActionName = "Index",
                            AreaName = "Admin",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3197),
                            CssName = "",
                            MenuName = "Achievement",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ActionName = "Index",
                            AreaName = "Admin",
                            ClassName = "far fa-circle nav-icon",
                            ControllerName = "Account",
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 654, DateTimeKind.Local).AddTicks(3199),
                            CssName = "",
                            MenuName = "Activities",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 655, DateTimeKind.Local).AddTicks(283),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 655, DateTimeKind.Local).AddTicks(320),
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComputerSkills")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medialink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2024, 11, 4, 11, 4, 53, 656, DateTimeKind.Local).AddTicks(1225),
                            Email = "idilerdogan@sabanciuniv.edu",
                            Name = "İdil",
                            Password = "qwe",
                            Phone = "+90 539 371 69 85",
                            SurName = "Erdoğan",
                            UserName = "idilerdogan"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Achievement", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Achievements")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Activitie", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Activities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Education", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Education")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Experiance", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Experiances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Language", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Languages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.MainMenu", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.MainMenu", "ParentMenu")
                        .WithMany()
                        .HasForeignKey("ParentMenuId");

                    b.HasOne("MySite.Entities.Entities.Concrete.Role", "Roles")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("ParentMenu");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Project", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Projects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.Skill", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("Skills")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.SocialMedia", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("MySite.Entities.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MySite.Entities.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MySite.Entities.Entities.Concrete.User", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Activities");

                    b.Navigation("Education");

                    b.Navigation("Experiances");

                    b.Navigation("Languages");

                    b.Navigation("Projects");

                    b.Navigation("Skills");

                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
